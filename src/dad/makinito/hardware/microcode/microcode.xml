<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<instructionSet>

    <!-- ================================= -->
    <!-- INSTRUCCIONES -->
    <!-- ================================= -->

	<!--  MOVER X,[X] -->
    <microprogram name="MOVER">
		<parameters>
            <parameter addressingMode="IMMEDIATE"/>
            <parameter addressingMode="DIRECT"/>
        </parameters>
        <microInstructions>
            <macroInstruction name="FROM-IMMEDIATE-TO-BUS">
            	 <parameter name="cde" value="1" /> 
            	 <parameter name="bus" value="BD"/>
            </macroInstruction>
            <macroInstruction name="FROM-DATABUS-TO-DIRECT">
            	 <parameter name="cde" value="2" /> 
            </macroInstruction>
            <signalInstruction name="ICP" />
        </microInstructions>
    </microprogram>
    
	<!--  MOVER X,[[X]] -->
    <microprogram name="MOVER">
		<parameters>
            <parameter addressingMode="IMMEDIATE"/>
            <parameter addressingMode="INDIRECT"/>
        </parameters>
        <microInstructions>
            <macroInstruction name="FROM-IMMEDIATE-TO-BUS">
            	 <parameter name="cde" value="1" /> 
            	 <parameter name="bus" value="BD"/>
            </macroInstruction>
            <macroInstruction name="FROM-DATABUS-TO-INDIRECT">
            	 <parameter name="cde" value="2" /> 
            </macroInstruction>
            <signalInstruction name="ICP" />            
        </microInstructions>
    </microprogram>
    
	<!--  MOVER X,REG -->
    <microprogram name="MOVER">
		<parameters>
            <parameter addressingMode="IMMEDIATE"/>
            <parameter addressingMode="REGISTER" name="reg"/>
        </parameters>
        <microInstructions>
            <macroInstruction name="FROM-IMMEDIATE-TO-REGISTER">
            	 <parameter name="cde" value="1" /> 
            	 <parameter name="reg" value="$reg"/>
            </macroInstruction>
            <signalInstruction name="ICP" />            
        </microInstructions>
    </microprogram>

	<!--  MOVER [X],[[X]] -->
    <microprogram name="MOVER">
		<parameters>
            <parameter addressingMode="DIRECT"/>
            <parameter addressingMode="INDIRECT"/>
        </parameters>
        <microInstructions>
            <macroInstruction name="FROM-DIRECT-TO-BUS">
            	 <parameter name="cde" value="1" /> 
            	 <parameter name="bus" value="BD"/>
            </macroInstruction>
            <macroInstruction name="FROM-DATABUS-TO-INDIRECT">
            	 <parameter name="cde" value="2" /> 
            </macroInstruction>
            <signalInstruction name="ICP" />            
        </microInstructions>
    </microprogram>
    
	<!--  MOVER [X],[X] -->
    <microprogram name="MOVER">
		<parameters>
            <parameter addressingMode="DIRECT"/>
            <parameter addressingMode="DIRECT"/>
        </parameters>
        <microInstructions>
            <macroInstruction name="FROM-DIRECT-TO-BUS">
            	 <parameter name="cde" value="1" /> 
            	 <parameter name="bus" value="BD"/>
            </macroInstruction>
            <macroInstruction name="FROM-DATABUS-TO-DIRECT">
            	 <parameter name="cde" value="2" /> 
            </macroInstruction>
            <signalInstruction name="ICP" />            
        </microInstructions>
    </microprogram>

	<!--  MOVER [[X]],[X] -->
    <microprogram name="MOVER">
		<parameters>
            <parameter addressingMode="INDIRECT"/>
            <parameter addressingMode="DIRECT"/>
        </parameters>
        <microInstructions>
            <macroInstruction name="FROM-INDIRECT-TO-BUS">
            	 <parameter name="cde" value="1" /> 
            	 <parameter name="bus" value="BD"/>
            </macroInstruction>
            <macroInstruction name="FROM-DATABUS-TO-DIRECT">
            	 <parameter name="cde" value="2" /> 
            </macroInstruction>
            <signalInstruction name="ICP" />            
        </microInstructions>
    </microprogram>
        
	<!--  MOVER [[X]],[[X]] -->
    <microprogram name="MOVER">
		<parameters>
            <parameter addressingMode="INDIRECT"/>
            <parameter addressingMode="INDIRECT"/>
        </parameters>
        <microInstructions>
            <macroInstruction name="FROM-INDIRECT-TO-BUS">
            	 <parameter name="cde" value="1" /> 
            	 <parameter name="bus" value="BD"/>
            </macroInstruction>
            <macroInstruction name="FROM-DATABUS-TO-INDIRECT">
            	 <parameter name="cde" value="2" /> 
            </macroInstruction>
            <signalInstruction name="ICP" />            
        </microInstructions>
    </microprogram>
        
	<!--  MOVER [X],REG -->
    <microprogram name="MOVER">
		<parameters>
            <parameter addressingMode="DIRECT"/>
            <parameter addressingMode="REGISTER" name="reg"/>
        </parameters>
        <microInstructions>
            <macroInstruction name="FROM-DIRECT-TO-REGISTER">
            	 <parameter name="cde" value="1" /> 
            	 <parameter name="reg" value="$reg"/>
            </macroInstruction>
			<signalInstruction name="ICP" />
        </microInstructions>
    </microprogram>
    
	<!--  MOVER REG,[X] -->
    <microprogram name="MOVER">
		<parameters>
            <parameter addressingMode="REGISTER" name="reg"/>
            <parameter addressingMode="DIRECT"/>
        </parameters>
        <microInstructions>
            <macroInstruction name="FROM-REGISTER-TO-BUS">
            	 <parameter name="reg" value="$reg" /> 
            	 <parameter name="bus" value="BD"/>
            </macroInstruction>
            <macroInstruction name="FROM-DATABUS-TO-DIRECT">
            	 <parameter name="cde" value="2" /> 
            </macroInstruction>
			<signalInstruction name="ICP" />
        </microInstructions>
    </microprogram>
    
	<!--  MOVER [[X]],REG -->
    <microprogram name="MOVER">
		<parameters>
            <parameter addressingMode="INDIRECT"/>
            <parameter addressingMode="REGISTER" name="reg"/>
        </parameters>
        <microInstructions>
            <macroInstruction name="FROM-INDIRECT-TO-REGISTER">
            	 <parameter name="cde" value="1" /> 
            	 <parameter name="reg" value="$reg"/>
            </macroInstruction>
            <signalInstruction name="ICP" />
		</microInstructions>
    </microprogram>
    
	<!--  MOVER REG,[[X]] -->
    <microprogram name="MOVER">
		<parameters>
            <parameter addressingMode="REGISTER" name="reg"/>
            <parameter addressingMode="INDIRECT"/>
        </parameters>
        <microInstructions>
            <macroInstruction name="FROM-REGISTER-TO-BUS">
            	 <parameter name="reg" value="$reg" /> 
            	 <parameter name="bus" value="BD"/>
            </macroInstruction>
            <macroInstruction name="FROM-DATABUS-TO-INDIRECT">
            	 <parameter name="cde" value="2" /> 
            </macroInstruction>
			<signalInstruction name="ICP" />
        </microInstructions>
    </microprogram>

	<!--  MOVER REG,REG -->
    <microprogram name="MOVER">
		<parameters>
            <parameter addressingMode="REGISTER" name="reg1"/>
            <parameter addressingMode="REGISTER" name="reg2"/>
        </parameters>
        <microInstructions>
            <macroInstruction name="FROM-REGISTER-TO-REGISTER">
            	 <parameter name="reg1" value="$reg1" /> 
            	 <parameter name="reg2" value="$reg2"/>
            </macroInstruction>
            <signalInstruction name="ICP" />
		</microInstructions>
    </microprogram>
    
	<!-- TERMINAR -->
    <microprogram name="TERMINAR">
        <microInstructions>
            <signalInstruction name="TERM" />
		</microInstructions>
    </microprogram>

    <!-- SUMAR -->
    <microprogram name="SUMAR">
        <microInstructions>
            <signalInstruction name="UAL-OP(+)" />
            <signalInstruction name="ICP" />
		</microInstructions>
    </microprogram>

    <!-- SUMAR X -->
    <microprogram name="SUMAR">
		<parameters>
            <parameter addressingMode="IMMEDIATE"/>
        </parameters>
        <microInstructions>
            <macroInstruction name="FROM-IMMEDIATE-TO-REGISTER">
            	 <parameter name="cde" value="1" /> 
            	 <parameter name="reg" value="RT" /> 
            </macroInstruction>
            <macroInstruction name="SUMAR" />
		</microInstructions>
    </microprogram>
    
	<!-- SUMAR [X] -->
    <microprogram name="SUMAR">
		<parameters>
            <parameter addressingMode="DIRECT"/>
        </parameters>
        <microInstructions>
            <macroInstruction name="FROM-DIRECT-TO-REGISTER">
            	 <parameter name="cde" value="1" /> 
            	 <parameter name="reg" value="RT" /> 
            </macroInstruction>
            <macroInstruction name="SUMAR" />
		</microInstructions>
    </microprogram>
    
	<!-- SUMAR [[X]] -->
    <microprogram name="SUMAR">
		<parameters>
            <parameter addressingMode="INDIRECT"/>
        </parameters>
        <microInstructions>
            <macroInstruction name="FROM-INDIRECT-TO-REGISTER">
            	 <parameter name="cde" value="1" /> 
            	 <parameter name="reg" value="RT" /> 
            </macroInstruction>
            <macroInstruction name="SUMAR" />
		</microInstructions>
    </microprogram>    
    
	<!-- SUMAR REG -->
    <microprogram name="SUMAR">
		<parameters>
            <parameter addressingMode="REGISTER" name="reg"/>
        </parameters>
        <microInstructions>
            <macroInstruction name="FROM-REGISTER-TO-REGISTER">
            	 <parameter name="reg1" value="$reg"/>
            	 <parameter name="reg2" value="RT" /> 
            </macroInstruction>
            <macroInstruction name="SUMAR" />
		</microInstructions>
    </microprogram> 

    <!-- SUMAR X,X -->
    <microprogram name="SUMAR">
		<parameters>
            <parameter addressingMode="IMMEDIATE"/>
            <parameter addressingMode="IMMEDIATE"/>
        </parameters>
        <microInstructions>
            <macroInstruction name="FROM-OPERANDS-TO-ALU">
            	 <parameter name="am1" value="IMMEDIATE" /> 
            	 <parameter name="am2" value="IMMEDIATE"/>
            </macroInstruction>
            <macroInstruction name="SUMAR" />
		</microInstructions>
    </microprogram>
    
	<!-- SUMAR X,[X] -->
    <microprogram name="SUMAR">
		<parameters>
            <parameter addressingMode="IMMEDIATE"/>
            <parameter addressingMode="DIRECT"/>
        </parameters>
        <microInstructions>
            <macroInstruction name="FROM-OPERANDS-TO-ALU">
            	 <parameter name="am1" value="IMMEDIATE" /> 
            	 <parameter name="am2" value="DIRECT"/>
            </macroInstruction>
            <macroInstruction name="SUMAR" />
		</microInstructions>
    </microprogram>

	<!-- SUMAR X,[[X]] -->
    <microprogram name="SUMAR">
		<parameters>
            <parameter addressingMode="IMMEDIATE"/>
            <parameter addressingMode="INDIRECT"/>
        </parameters>
        <microInstructions>
            <macroInstruction name="FROM-OPERANDS-TO-ALU">
            	 <parameter name="am1" value="IMMEDIATE" /> 
            	 <parameter name="am2" value="INDIRECT"/>
            </macroInstruction>
            <macroInstruction name="SUMAR" />
		</microInstructions>
    </microprogram>      

	<!-- SUMAR X,REG -->
    <microprogram name="SUMAR">
		<parameters>
            <parameter addressingMode="IMMEDIATE"/>
            <parameter addressingMode="REGISTER" name="reg"/>
        </parameters>
        <microInstructions>
            <macroInstruction name="FROM-REGISTER-TO-REGISTER">
            	 <parameter name="reg1" value="$reg" /> 
            	 <parameter name="reg2" value="RT"/>
            </macroInstruction>
            <macroInstruction name="FROM-IMMEDIATE-TO-REGISTER">
            	 <parameter name="cde" value="1" /> 
            	 <parameter name="reg" value="AC"/>
            </macroInstruction>
            <macroInstruction name="SUMAR" />
		</microInstructions>
    </microprogram>   

    <!-- SUMAR [X],X -->
    <microprogram name="SUMAR">
		<parameters>
            <parameter addressingMode="DIRECT"/>
            <parameter addressingMode="IMMEDIATE"/>
        </parameters>
        <microInstructions>
            <macroInstruction name="FROM-OPERANDS-TO-ALU">
            	 <parameter name="am1" value="DIRECT" /> 
            	 <parameter name="am2" value="IMMEDIATE"/>
            </macroInstruction>
            <macroInstruction name="SUMAR" />
		</microInstructions>
    </microprogram>
    
	<!-- SUMAR [X],[X] -->
    <microprogram name="SUMAR">
		<parameters>
            <parameter addressingMode="DIRECT"/>
            <parameter addressingMode="DIRECT"/>
        </parameters>
        <microInstructions>
            <macroInstruction name="FROM-OPERANDS-TO-ALU">
            	 <parameter name="am1" value="DIRECT" /> 
            	 <parameter name="am2" value="DIRECT"/>
            </macroInstruction>
            <macroInstruction name="SUMAR" />
		</microInstructions>
    </microprogram>

	<!-- SUMAR [X],[[X]] -->
    <microprogram name="SUMAR">
		<parameters>
            <parameter addressingMode="DIRECT"/>
            <parameter addressingMode="INDIRECT"/>
        </parameters>
        <microInstructions>
            <macroInstruction name="FROM-OPERANDS-TO-ALU">
            	 <parameter name="am1" value="DIRECT" /> 
            	 <parameter name="am2" value="INDIRECT"/>
            </macroInstruction>
            <macroInstruction name="SUMAR" />
		</microInstructions>
    </microprogram>      

	<!-- SUMAR [X],REG -->
    <microprogram name="SUMAR">
		<parameters>
            <parameter addressingMode="DIRECT"/>
            <parameter addressingMode="REGISTER" name="reg"/>
        </parameters>
        <microInstructions>
            <macroInstruction name="FROM-REGISTER-TO-REGISTER">
            	 <parameter name="reg1" value="$reg" /> 
            	 <parameter name="reg2" value="RT"/>
            </macroInstruction>
            <macroInstruction name="FROM-DIRECT-TO-REGISTER">
            	 <parameter name="cde" value="1" /> 
            	 <parameter name="reg" value="AC"/>
            </macroInstruction>
            <macroInstruction name="SUMAR" />
		</microInstructions>
    </microprogram>  

    <!-- SUMAR [[X]],X -->
    <microprogram name="SUMAR">
		<parameters>
            <parameter addressingMode="INDIRECT"/>
            <parameter addressingMode="IMMEDIATE"/>
        </parameters>
        <microInstructions>
            <macroInstruction name="FROM-OPERANDS-TO-ALU">
            	 <parameter name="am1" value="INDIRECT" /> 
            	 <parameter name="am2" value="IMMEDIATE"/>
            </macroInstruction>
            <macroInstruction name="SUMAR" />
		</microInstructions>
    </microprogram>
    
	<!-- SUMAR [[X]],[X] -->
    <microprogram name="SUMAR">
		<parameters>
            <parameter addressingMode="INDIRECT"/>
            <parameter addressingMode="DIRECT"/>
        </parameters>
        <microInstructions>
            <macroInstruction name="FROM-OPERANDS-TO-ALU">
            	 <parameter name="am1" value="INDIRECT" /> 
            	 <parameter name="am2" value="DIRECT"/>
            </macroInstruction>
            <macroInstruction name="SUMAR" />
		</microInstructions>
    </microprogram>

	<!-- SUMAR [[X]],[[X]] -->
    <microprogram name="SUMAR">
		<parameters>
            <parameter addressingMode="INDIRECT"/>
            <parameter addressingMode="INDIRECT"/>
        </parameters>
        <microInstructions>
            <macroInstruction name="FROM-OPERANDS-TO-ALU">
            	 <parameter name="am1" value="INDIRECT" /> 
            	 <parameter name="am2" value="INDIRECT"/>
            </macroInstruction>
            <macroInstruction name="SUMAR" />
		</microInstructions>
    </microprogram>      

	<!-- SUMAR [[X]],REG -->
    <microprogram name="SUMAR">
		<parameters>
            <parameter addressingMode="INDIRECT"/>
            <parameter addressingMode="REGISTER" name="reg"/>
        </parameters>
        <microInstructions>
            <macroInstruction name="FROM-REGISTER-TO-REGISTER">
            	 <parameter name="reg1" value="$reg" /> 
            	 <parameter name="reg2" value="RT"/>
            </macroInstruction>
            <macroInstruction name="FROM-INDIRECT-TO-REGISTER">
            	 <parameter name="cde" value="1" /> 
            	 <parameter name="reg" value="AC"/>
            </macroInstruction>
            <macroInstruction name="SUMAR" />
		</microInstructions>
    </microprogram>

    <!-- SUMAR REG,X -->
    <microprogram name="SUMAR">
		<parameters>
            <parameter addressingMode="REGISTER" name="reg"/>
            <parameter addressingMode="IMMEDIATE"/>
        </parameters>
        <microInstructions>
            <macroInstruction name="FROM-REGISTER-TO-REGISTER">
            	 <parameter name="reg1" value="$reg" /> 
            	 <parameter name="reg2" value="AC"/>
            </macroInstruction>
            <macroInstruction name="FROM-IMMEDIATE-TO-REGISTER">
            	 <parameter name="cde" value="2" /> 
            	 <parameter name="reg" value="RT"/>
            </macroInstruction>
            <macroInstruction name="SUMAR" />
		</microInstructions>
    </microprogram>
    
	<!-- SUMAR REG,[X] -->
    <microprogram name="SUMAR">
		<parameters>
            <parameter addressingMode="REGISTER" name="reg"/>
            <parameter addressingMode="DIRECT"/>
        </parameters>
        <microInstructions>
            <macroInstruction name="FROM-REGISTER-TO-REGISTER">
            	 <parameter name="reg1" value="$reg" /> 
            	 <parameter name="reg2" value="AC"/>
            </macroInstruction>
            <macroInstruction name="FROM-DIRECT-TO-REGISTER">
            	 <parameter name="cde" value="2" /> 
            	 <parameter name="reg" value="RT"/>
            </macroInstruction>
            <macroInstruction name="SUMAR" />
		</microInstructions>
    </microprogram>

	<!-- SUMAR REG,[[X]] -->
    <microprogram name="SUMAR">
		<parameters>
            <parameter addressingMode="REGISTER" name="reg"/>
            <parameter addressingMode="INDIRECT"/>
        </parameters>
        <microInstructions>
            <macroInstruction name="FROM-REGISTER-TO-REGISTER">
            	 <parameter name="reg1" value="$reg" /> 
            	 <parameter name="reg2" value="AC"/>
            </macroInstruction>
            <macroInstruction name="FROM-INDIRECT-TO-REGISTER">
            	 <parameter name="cde" value="2" /> 
            	 <parameter name="reg" value="RT"/>
            </macroInstruction>
            <macroInstruction name="SUMAR" />
		</microInstructions>
    </microprogram>      

	<!-- SUMAR REG,REG -->
    <microprogram name="SUMAR">
		<parameters>
            <parameter addressingMode="REGISTER" name="reg1"/>
            <parameter addressingMode="REGISTER" name="reg2"/>
        </parameters>
        <microInstructions>
            <macroInstruction name="FROM-REGISTER-TO-REGISTER">
            	 <parameter name="reg1" value="$reg1" /> 
            	 <parameter name="reg2" value="AC"/>
            </macroInstruction>
            <macroInstruction name="FROM-REGISTER-TO-REGISTER">
            	 <parameter name="reg1" value="$reg2" /> 
            	 <parameter name="reg2" value="RT"/>
            </macroInstruction>
            <macroInstruction name="SUMAR" />
		</microInstructions>
    </microprogram>

    <!-- RESTAR -->
    <microprogram name="RESTAR">
        <microInstructions>
            <signalInstruction name="UAL-OP(-)" />
            <signalInstruction name="ICP" />
		</microInstructions>
    </microprogram>

    <!-- RESTAR X -->
    <microprogram name="RESTAR">
		<parameters>
            <parameter addressingMode="IMMEDIATE"/>
        </parameters>
        <microInstructions>
            <macroInstruction name="FROM-IMMEDIATE-TO-REGISTER">
            	 <parameter name="cde" value="1" /> 
            	 <parameter name="reg" value="RT" /> 
            </macroInstruction>
            <macroInstruction name="RESTAR" />
		</microInstructions>
    </microprogram>
    
	<!-- RESTAR [X] -->
    <microprogram name="RESTAR">
		<parameters>
            <parameter addressingMode="DIRECT"/>
        </parameters>
        <microInstructions>
            <macroInstruction name="FROM-DIRECT-TO-REGISTER">
            	 <parameter name="cde" value="1" /> 
            	 <parameter name="reg" value="RT" /> 
            </macroInstruction>
            <macroInstruction name="RESTAR" />
		</microInstructions>
    </microprogram>
    
	<!-- RESTAR [[X]] -->
    <microprogram name="RESTAR">
		<parameters>
            <parameter addressingMode="INDIRECT"/>
        </parameters>
        <microInstructions>
            <macroInstruction name="FROM-INDIRECT-TO-REGISTER">
            	 <parameter name="cde" value="1" /> 
            	 <parameter name="reg" value="RT" /> 
            </macroInstruction>
            <macroInstruction name="RESTAR" />
		</microInstructions>
    </microprogram>    
    
	<!-- RESTAR REG -->
    <microprogram name="RESTAR">
		<parameters>
            <parameter addressingMode="REGISTER" name="reg"/>
        </parameters>
        <microInstructions>
            <macroInstruction name="FROM-REGISTER-TO-REGISTER">
            	 <parameter name="reg1" value="$reg"/>
            	 <parameter name="reg2" value="RT" /> 
            </macroInstruction>
            <macroInstruction name="RESTAR" />
		</microInstructions>
    </microprogram> 

    <!-- RESTAR X,X -->
    <microprogram name="RESTAR">
		<parameters>
            <parameter addressingMode="IMMEDIATE"/>
            <parameter addressingMode="IMMEDIATE"/>
        </parameters>
        <microInstructions>
            <macroInstruction name="FROM-OPERANDS-TO-ALU">
            	 <parameter name="am1" value="IMMEDIATE" /> 
            	 <parameter name="am2" value="IMMEDIATE"/>
            </macroInstruction>
            <macroInstruction name="RESTAR" />
		</microInstructions>
    </microprogram>
    
	<!-- RESTAR X,[X] -->
    <microprogram name="RESTAR">
		<parameters>
            <parameter addressingMode="IMMEDIATE"/>
            <parameter addressingMode="DIRECT"/>
        </parameters>
        <microInstructions>
            <macroInstruction name="FROM-OPERANDS-TO-ALU">
            	 <parameter name="am1" value="IMMEDIATE" /> 
            	 <parameter name="am2" value="DIRECT"/>
            </macroInstruction>
            <macroInstruction name="RESTAR" />
		</microInstructions>
    </microprogram>

	<!-- RESTAR X,[[X]] -->
    <microprogram name="RESTAR">
		<parameters>
            <parameter addressingMode="IMMEDIATE"/>
            <parameter addressingMode="INDIRECT"/>
        </parameters>
        <microInstructions>
            <macroInstruction name="FROM-OPERANDS-TO-ALU">
            	 <parameter name="am1" value="IMMEDIATE" /> 
            	 <parameter name="am2" value="INDIRECT"/>
            </macroInstruction>
            <macroInstruction name="RESTAR" />
		</microInstructions>
    </microprogram>      

	<!-- RESTAR X,REG -->
    <microprogram name="RESTAR">
		<parameters>
            <parameter addressingMode="IMMEDIATE"/>
            <parameter addressingMode="REGISTER" name="reg"/>
        </parameters>
        <microInstructions>
            <macroInstruction name="FROM-REGISTER-TO-REGISTER">
            	 <parameter name="reg1" value="$reg" /> 
            	 <parameter name="reg2" value="RT"/>
            </macroInstruction>
            <macroInstruction name="FROM-IMMEDIATE-TO-REGISTER">
            	 <parameter name="cde" value="1" /> 
            	 <parameter name="reg" value="AC"/>
            </macroInstruction>
            <macroInstruction name="RESTAR" />
		</microInstructions>
    </microprogram>   

    <!-- RESTAR [X],X -->
    <microprogram name="RESTAR">
		<parameters>
            <parameter addressingMode="DIRECT"/>
            <parameter addressingMode="IMMEDIATE"/>
        </parameters>
        <microInstructions>
            <macroInstruction name="FROM-OPERANDS-TO-ALU">
            	 <parameter name="am1" value="DIRECT" /> 
            	 <parameter name="am2" value="IMMEDIATE"/>
            </macroInstruction>
            <macroInstruction name="RESTAR" />
		</microInstructions>
    </microprogram>
    
	<!-- RESTAR [X],[X] -->
    <microprogram name="RESTAR">
		<parameters>
            <parameter addressingMode="DIRECT"/>
            <parameter addressingMode="DIRECT"/>
        </parameters>
        <microInstructions>
            <macroInstruction name="FROM-OPERANDS-TO-ALU">
            	 <parameter name="am1" value="DIRECT" /> 
            	 <parameter name="am2" value="DIRECT"/>
            </macroInstruction>
            <macroInstruction name="RESTAR" />
		</microInstructions>
    </microprogram>

	<!-- RESTAR [X],[[X]] -->
    <microprogram name="RESTAR">
		<parameters>
            <parameter addressingMode="DIRECT"/>
            <parameter addressingMode="INDIRECT"/>
        </parameters>
        <microInstructions>
            <macroInstruction name="FROM-OPERANDS-TO-ALU">
            	 <parameter name="am1" value="DIRECT" /> 
            	 <parameter name="am2" value="INDIRECT"/>
            </macroInstruction>
            <macroInstruction name="RESTAR" />
		</microInstructions>
    </microprogram>      

	<!-- RESTAR [X],REG -->
    <microprogram name="RESTAR">
		<parameters>
            <parameter addressingMode="DIRECT"/>
            <parameter addressingMode="REGISTER" name="reg"/>
        </parameters>
        <microInstructions>
            <macroInstruction name="FROM-REGISTER-TO-REGISTER">
            	 <parameter name="reg1" value="$reg" /> 
            	 <parameter name="reg2" value="RT"/>
            </macroInstruction>
            <macroInstruction name="FROM-DIRECT-TO-REGISTER">
            	 <parameter name="cde" value="1" /> 
            	 <parameter name="reg" value="AC"/>
            </macroInstruction>
            <macroInstruction name="RESTAR" />
		</microInstructions>
    </microprogram>  

    <!-- RESTAR [[X]],X -->
    <microprogram name="RESTAR">
		<parameters>
            <parameter addressingMode="INDIRECT"/>
            <parameter addressingMode="IMMEDIATE"/>
        </parameters>
        <microInstructions>
            <macroInstruction name="FROM-OPERANDS-TO-ALU">
            	 <parameter name="am1" value="INDIRECT" /> 
            	 <parameter name="am2" value="IMMEDIATE"/>
            </macroInstruction>
            <macroInstruction name="RESTAR" />
		</microInstructions>
    </microprogram>
    
	<!-- RESTAR [[X]],[X] -->
    <microprogram name="RESTAR">
		<parameters>
            <parameter addressingMode="INDIRECT"/>
            <parameter addressingMode="DIRECT"/>
        </parameters>
        <microInstructions>
            <macroInstruction name="FROM-OPERANDS-TO-ALU">
            	 <parameter name="am1" value="INDIRECT" /> 
            	 <parameter name="am2" value="DIRECT"/>
            </macroInstruction>
            <macroInstruction name="RESTAR" />
		</microInstructions>
    </microprogram>

	<!-- RESTAR [[X]],[[X]] -->
    <microprogram name="RESTAR">
		<parameters>
            <parameter addressingMode="INDIRECT"/>
            <parameter addressingMode="INDIRECT"/>
        </parameters>
        <microInstructions>
            <macroInstruction name="FROM-OPERANDS-TO-ALU">
            	 <parameter name="am1" value="INDIRECT" /> 
            	 <parameter name="am2" value="INDIRECT"/>
            </macroInstruction>
            <macroInstruction name="RESTAR" />
		</microInstructions>
    </microprogram>      

	<!-- RESTAR [[X]],REG -->
    <microprogram name="RESTAR">
		<parameters>
            <parameter addressingMode="INDIRECT"/>
            <parameter addressingMode="REGISTER" name="reg"/>
        </parameters>
        <microInstructions>
            <macroInstruction name="FROM-REGISTER-TO-REGISTER">
            	 <parameter name="reg1" value="$reg" /> 
            	 <parameter name="reg2" value="RT"/>
            </macroInstruction>
            <macroInstruction name="FROM-INDIRECT-TO-REGISTER">
            	 <parameter name="cde" value="1" /> 
            	 <parameter name="reg" value="AC"/>
            </macroInstruction>
            <macroInstruction name="RESTAR" />
		</microInstructions>
    </microprogram>

    <!-- RESTAR REG,X -->
    <microprogram name="RESTAR">
		<parameters>
            <parameter addressingMode="REGISTER" name="reg"/>
            <parameter addressingMode="IMMEDIATE"/>
        </parameters>
        <microInstructions>
            <macroInstruction name="FROM-REGISTER-TO-REGISTER">
            	 <parameter name="reg1" value="$reg" /> 
            	 <parameter name="reg2" value="AC"/>
            </macroInstruction>
            <macroInstruction name="FROM-IMMEDIATE-TO-REGISTER">
            	 <parameter name="cde" value="2" /> 
            	 <parameter name="reg" value="RT"/>
            </macroInstruction>
            <macroInstruction name="RESTAR" />
		</microInstructions>
    </microprogram>
    
	<!-- RESTAR REG,[X] -->
    <microprogram name="RESTAR">
		<parameters>
            <parameter addressingMode="REGISTER" name="reg"/>
            <parameter addressingMode="DIRECT"/>
        </parameters>
        <microInstructions>
            <macroInstruction name="FROM-REGISTER-TO-REGISTER">
            	 <parameter name="reg1" value="$reg" /> 
            	 <parameter name="reg2" value="AC"/>
            </macroInstruction>
            <macroInstruction name="FROM-DIRECT-TO-REGISTER">
            	 <parameter name="cde" value="2" /> 
            	 <parameter name="reg" value="RT"/>
            </macroInstruction>
            <macroInstruction name="RESTAR" />
		</microInstructions>
    </microprogram>

	<!-- RESTAR REG,[[X]] -->
    <microprogram name="RESTAR">
		<parameters>
            <parameter addressingMode="REGISTER" name="reg"/>
            <parameter addressingMode="INDIRECT"/>
        </parameters>
        <microInstructions>
            <macroInstruction name="FROM-REGISTER-TO-REGISTER">
            	 <parameter name="reg1" value="$reg" /> 
            	 <parameter name="reg2" value="AC"/>
            </macroInstruction>
            <macroInstruction name="FROM-INDIRECT-TO-REGISTER">
            	 <parameter name="cde" value="2" /> 
            	 <parameter name="reg" value="RT"/>
            </macroInstruction>
            <macroInstruction name="RESTAR" />
		</microInstructions>
    </microprogram>      

	<!-- RESTAR REG,REG -->
    <microprogram name="RESTAR">
		<parameters>
            <parameter addressingMode="REGISTER" name="reg1"/>
            <parameter addressingMode="REGISTER" name="reg2"/>
        </parameters>
        <microInstructions>
            <macroInstruction name="FROM-REGISTER-TO-REGISTER">
            	 <parameter name="reg1" value="$reg1" /> 
            	 <parameter name="reg2" value="AC"/>
            </macroInstruction>
            <macroInstruction name="FROM-REGISTER-TO-REGISTER">
            	 <parameter name="reg1" value="$reg2" /> 
            	 <parameter name="reg2" value="RT"/>
            </macroInstruction>
            <macroInstruction name="RESTAR" />
		</microInstructions>
    </microprogram>

	<!-- MULTIPLICAR -->
    <microprogram name="MULTIPLICAR">
        <microInstructions>
            <signalInstruction name="UAL-OP(*)" />
            <signalInstruction name="ICP" />
		</microInstructions>
    </microprogram>

    <!-- MULTIPLICAR X -->
    <microprogram name="MULTIPLICAR">
		<parameters>
            <parameter addressingMode="IMMEDIATE"/>
        </parameters>
        <microInstructions>
            <macroInstruction name="FROM-IMMEDIATE-TO-REGISTER">
            	 <parameter name="cde" value="1" /> 
            	 <parameter name="reg" value="RT" /> 
            </macroInstruction>
            <macroInstruction name="MULTIPLICAR" />
		</microInstructions>
    </microprogram>
    
	<!-- MULTIPLICAR [X] -->
    <microprogram name="MULTIPLICAR">
		<parameters>
            <parameter addressingMode="DIRECT"/>
        </parameters>
        <microInstructions>
            <macroInstruction name="FROM-DIRECT-TO-REGISTER">
            	 <parameter name="cde" value="1" /> 
            	 <parameter name="reg" value="RT" /> 
            </macroInstruction>
            <macroInstruction name="MULTIPLICAR" />
		</microInstructions>
    </microprogram>
    
	<!-- MULTIPLICAR [[X]] -->
    <microprogram name="MULTIPLICAR">
		<parameters>
            <parameter addressingMode="INDIRECT"/>
        </parameters>
        <microInstructions>
            <macroInstruction name="FROM-INDIRECT-TO-REGISTER">
            	 <parameter name="cde" value="1" /> 
            	 <parameter name="reg" value="RT" /> 
            </macroInstruction>
            <macroInstruction name="MULTIPLICAR" />
		</microInstructions>
    </microprogram>    
    
	<!-- MULTIPLICAR REG -->
    <microprogram name="MULTIPLICAR">
		<parameters>
            <parameter addressingMode="REGISTER" name="reg"/>
        </parameters>
        <microInstructions>
            <macroInstruction name="FROM-REGISTER-TO-REGISTER">
            	 <parameter name="reg1" value="$reg"/>
            	 <parameter name="reg2" value="RT" /> 
            </macroInstruction>
            <macroInstruction name="MULTIPLICAR" />
		</microInstructions>
    </microprogram> 

    <!-- MULTIPLICAR X,X -->
    <microprogram name="MULTIPLICAR">
		<parameters>
            <parameter addressingMode="IMMEDIATE"/>
            <parameter addressingMode="IMMEDIATE"/>
        </parameters>
        <microInstructions>
            <macroInstruction name="FROM-OPERANDS-TO-ALU">
            	 <parameter name="am1" value="IMMEDIATE" /> 
            	 <parameter name="am2" value="IMMEDIATE"/>
            </macroInstruction>
            <macroInstruction name="MULTIPLICAR" />
		</microInstructions>
    </microprogram>
    
	<!-- MULTIPLICAR X,[X] -->
    <microprogram name="MULTIPLICAR">
		<parameters>
            <parameter addressingMode="IMMEDIATE"/>
            <parameter addressingMode="DIRECT"/>
        </parameters>
        <microInstructions>
            <macroInstruction name="FROM-OPERANDS-TO-ALU">
            	 <parameter name="am1" value="IMMEDIATE" /> 
            	 <parameter name="am2" value="DIRECT"/>
            </macroInstruction>
            <macroInstruction name="MULTIPLICAR" />
		</microInstructions>
    </microprogram>

	<!-- MULTIPLICAR X,[[X]] -->
    <microprogram name="MULTIPLICAR">
		<parameters>
            <parameter addressingMode="IMMEDIATE"/>
            <parameter addressingMode="INDIRECT"/>
        </parameters>
        <microInstructions>
            <macroInstruction name="FROM-OPERANDS-TO-ALU">
            	 <parameter name="am1" value="IMMEDIATE" /> 
            	 <parameter name="am2" value="INDIRECT"/>
            </macroInstruction>
            <macroInstruction name="MULTIPLICAR" />
		</microInstructions>
    </microprogram>      

	<!-- MULTIPLICAR X,REG -->
    <microprogram name="MULTIPLICAR">
		<parameters>
            <parameter addressingMode="IMMEDIATE"/>
            <parameter addressingMode="REGISTER" name="reg"/>
        </parameters>
        <microInstructions>
            <macroInstruction name="FROM-REGISTER-TO-REGISTER">
            	 <parameter name="reg1" value="$reg" /> 
            	 <parameter name="reg2" value="RT"/>
            </macroInstruction>
            <macroInstruction name="FROM-IMMEDIATE-TO-REGISTER">
            	 <parameter name="cde" value="1" /> 
            	 <parameter name="reg" value="AC"/>
            </macroInstruction>
            <macroInstruction name="MULTIPLICAR" />
		</microInstructions>
    </microprogram>   

    <!-- MULTIPLICAR [X],X -->
    <microprogram name="MULTIPLICAR">
		<parameters>
            <parameter addressingMode="DIRECT"/>
            <parameter addressingMode="IMMEDIATE"/>
        </parameters>
        <microInstructions>
            <macroInstruction name="FROM-OPERANDS-TO-ALU">
            	 <parameter name="am1" value="DIRECT" /> 
            	 <parameter name="am2" value="IMMEDIATE"/>
            </macroInstruction>
            <macroInstruction name="MULTIPLICAR" />
		</microInstructions>
    </microprogram>
    
	<!-- MULTIPLICAR [X],[X] -->
    <microprogram name="MULTIPLICAR">
		<parameters>
            <parameter addressingMode="DIRECT"/>
            <parameter addressingMode="DIRECT"/>
        </parameters>
        <microInstructions>
            <macroInstruction name="FROM-OPERANDS-TO-ALU">
            	 <parameter name="am1" value="DIRECT" /> 
            	 <parameter name="am2" value="DIRECT"/>
            </macroInstruction>
            <macroInstruction name="MULTIPLICAR" />
		</microInstructions>
    </microprogram>

	<!-- MULTIPLICAR [X],[[X]] -->
    <microprogram name="MULTIPLICAR">
		<parameters>
            <parameter addressingMode="DIRECT"/>
            <parameter addressingMode="INDIRECT"/>
        </parameters>
        <microInstructions>
            <macroInstruction name="FROM-OPERANDS-TO-ALU">
            	 <parameter name="am1" value="DIRECT" /> 
            	 <parameter name="am2" value="INDIRECT"/>
            </macroInstruction>
            <macroInstruction name="MULTIPLICAR" />
		</microInstructions>
    </microprogram>      

	<!-- MULTIPLICAR [X],REG -->
    <microprogram name="MULTIPLICAR">
		<parameters>
            <parameter addressingMode="DIRECT"/>
            <parameter addressingMode="REGISTER" name="reg"/>
        </parameters>
        <microInstructions>
            <macroInstruction name="FROM-REGISTER-TO-REGISTER">
            	 <parameter name="reg1" value="$reg" /> 
            	 <parameter name="reg2" value="RT"/>
            </macroInstruction>
            <macroInstruction name="FROM-DIRECT-TO-REGISTER">
            	 <parameter name="cde" value="1" /> 
            	 <parameter name="reg" value="AC"/>
            </macroInstruction>
            <macroInstruction name="MULTIPLICAR" />
		</microInstructions>
    </microprogram>  

    <!-- MULTIPLICAR [[X]],X -->
    <microprogram name="MULTIPLICAR">
		<parameters>
            <parameter addressingMode="INDIRECT"/>
            <parameter addressingMode="IMMEDIATE"/>
        </parameters>
        <microInstructions>
            <macroInstruction name="FROM-OPERANDS-TO-ALU">
            	 <parameter name="am1" value="INDIRECT" /> 
            	 <parameter name="am2" value="IMMEDIATE"/>
            </macroInstruction>
            <macroInstruction name="MULTIPLICAR" />
		</microInstructions>
    </microprogram>
    
	<!-- MULTIPLICAR [[X]],[X] -->
    <microprogram name="MULTIPLICAR">
		<parameters>
            <parameter addressingMode="INDIRECT"/>
            <parameter addressingMode="DIRECT"/>
        </parameters>
        <microInstructions>
            <macroInstruction name="FROM-OPERANDS-TO-ALU">
            	 <parameter name="am1" value="INDIRECT" /> 
            	 <parameter name="am2" value="DIRECT"/>
            </macroInstruction>
            <macroInstruction name="MULTIPLICAR" />
		</microInstructions>
    </microprogram>

	<!-- MULTIPLICAR [[X]],[[X]] -->
    <microprogram name="MULTIPLICAR">
		<parameters>
            <parameter addressingMode="INDIRECT"/>
            <parameter addressingMode="INDIRECT"/>
        </parameters>
        <microInstructions>
            <macroInstruction name="FROM-OPERANDS-TO-ALU">
            	 <parameter name="am1" value="INDIRECT" /> 
            	 <parameter name="am2" value="INDIRECT"/>
            </macroInstruction>
            <macroInstruction name="MULTIPLICAR" />
		</microInstructions>
    </microprogram>      

	<!-- MULTIPLICAR [[X]],REG -->
    <microprogram name="MULTIPLICAR">
		<parameters>
            <parameter addressingMode="INDIRECT"/>
            <parameter addressingMode="REGISTER" name="reg"/>
        </parameters>
        <microInstructions>
            <macroInstruction name="FROM-REGISTER-TO-REGISTER">
            	 <parameter name="reg1" value="$reg" /> 
            	 <parameter name="reg2" value="RT"/>
            </macroInstruction>
            <macroInstruction name="FROM-INDIRECT-TO-REGISTER">
            	 <parameter name="cde" value="1" /> 
            	 <parameter name="reg" value="AC"/>
            </macroInstruction>
            <macroInstruction name="MULTIPLICAR" />
		</microInstructions>
    </microprogram>

    <!-- MULTIPLICAR REG,X -->
    <microprogram name="MULTIPLICAR">
		<parameters>
            <parameter addressingMode="REGISTER" name="reg"/>
            <parameter addressingMode="IMMEDIATE"/>
        </parameters>
        <microInstructions>
            <macroInstruction name="FROM-REGISTER-TO-REGISTER">
            	 <parameter name="reg1" value="$reg" /> 
            	 <parameter name="reg2" value="AC"/>
            </macroInstruction>
            <macroInstruction name="FROM-IMMEDIATE-TO-REGISTER">
            	 <parameter name="cde" value="2" /> 
            	 <parameter name="reg" value="RT"/>
            </macroInstruction>
            <macroInstruction name="MULTIPLICAR" />
		</microInstructions>
    </microprogram>
    
	<!-- MULTIPLICAR REG,[X] -->
    <microprogram name="MULTIPLICAR">
		<parameters>
            <parameter addressingMode="REGISTER" name="reg"/>
            <parameter addressingMode="DIRECT"/>
        </parameters>
        <microInstructions>
            <macroInstruction name="FROM-REGISTER-TO-REGISTER">
            	 <parameter name="reg1" value="$reg" /> 
            	 <parameter name="reg2" value="AC"/>
            </macroInstruction>
            <macroInstruction name="FROM-DIRECT-TO-REGISTER">
            	 <parameter name="cde" value="2" /> 
            	 <parameter name="reg" value="RT"/>
            </macroInstruction>
            <macroInstruction name="MULTIPLICAR" />
		</microInstructions>
    </microprogram>

	<!-- MULTIPLICAR REG,[[X]] -->
    <microprogram name="MULTIPLICAR">
		<parameters>
            <parameter addressingMode="REGISTER" name="reg"/>
            <parameter addressingMode="INDIRECT"/>
        </parameters>
        <microInstructions>
            <macroInstruction name="FROM-REGISTER-TO-REGISTER">
            	 <parameter name="reg1" value="$reg" /> 
            	 <parameter name="reg2" value="AC"/>
            </macroInstruction>
            <macroInstruction name="FROM-INDIRECT-TO-REGISTER">
            	 <parameter name="cde" value="2" /> 
            	 <parameter name="reg" value="RT"/>
            </macroInstruction>
            <macroInstruction name="MULTIPLICAR" />
		</microInstructions>
    </microprogram>      

	<!-- MULTIPLICAR REG,REG -->
    <microprogram name="MULTIPLICAR">
		<parameters>
            <parameter addressingMode="REGISTER" name="reg1"/>
            <parameter addressingMode="REGISTER" name="reg2"/>
        </parameters>
        <microInstructions>
            <macroInstruction name="FROM-REGISTER-TO-REGISTER">
            	 <parameter name="reg1" value="$reg1" /> 
            	 <parameter name="reg2" value="AC"/>
            </macroInstruction>
            <macroInstruction name="FROM-REGISTER-TO-REGISTER">
            	 <parameter name="reg1" value="$reg2" /> 
            	 <parameter name="reg2" value="RT"/>
            </macroInstruction>
            <macroInstruction name="MULTIPLICAR" />
		</microInstructions>
    </microprogram>

	<!-- DIVIDIR -->
    <microprogram name="DIVIDIR">
        <microInstructions>
            <signalInstruction name="UAL-OP(/)" />
            <signalInstruction name="ICP" />
		</microInstructions>
    </microprogram>

    <!-- DIVIDIR X -->
    <microprogram name="DIVIDIR">
		<parameters>
            <parameter addressingMode="IMMEDIATE"/>
        </parameters>
        <microInstructions>
            <macroInstruction name="FROM-IMMEDIATE-TO-REGISTER">
            	 <parameter name="cde" value="1" /> 
            	 <parameter name="reg" value="RT" /> 
            </macroInstruction>
            <macroInstruction name="DIVIDIR" />
		</microInstructions>
    </microprogram>
    
	<!-- DIVIDIR [X] -->
    <microprogram name="DIVIDIR">
		<parameters>
            <parameter addressingMode="DIRECT"/>
        </parameters>
        <microInstructions>
            <macroInstruction name="FROM-DIRECT-TO-REGISTER">
            	 <parameter name="cde" value="1" /> 
            	 <parameter name="reg" value="RT" /> 
            </macroInstruction>
            <macroInstruction name="DIVIDIR" />
		</microInstructions>
    </microprogram>
    
	<!-- DIVIDIR [[X]] -->
    <microprogram name="DIVIDIR">
		<parameters>
            <parameter addressingMode="INDIRECT"/>
        </parameters>
        <microInstructions>
            <macroInstruction name="FROM-INDIRECT-TO-REGISTER">
            	 <parameter name="cde" value="1" /> 
            	 <parameter name="reg" value="RT" /> 
            </macroInstruction>
            <macroInstruction name="DIVIDIR" />
		</microInstructions>
    </microprogram>    
    
	<!-- DIVIDIR REG -->
    <microprogram name="DIVIDIR">
		<parameters>
            <parameter addressingMode="REGISTER" name="reg"/>
        </parameters>
        <microInstructions>
            <macroInstruction name="FROM-REGISTER-TO-REGISTER">
            	 <parameter name="reg1" value="$reg"/>
            	 <parameter name="reg2" value="RT" /> 
            </macroInstruction>
            <macroInstruction name="DIVIDIR" />
		</microInstructions>
    </microprogram> 

    <!-- DIVIDIR X,X -->
    <microprogram name="DIVIDIR">
		<parameters>
            <parameter addressingMode="IMMEDIATE"/>
            <parameter addressingMode="IMMEDIATE"/>
        </parameters>
        <microInstructions>
            <macroInstruction name="FROM-OPERANDS-TO-ALU">
            	 <parameter name="am1" value="IMMEDIATE" /> 
            	 <parameter name="am2" value="IMMEDIATE"/>
            </macroInstruction>
            <macroInstruction name="DIVIDIR" />
		</microInstructions>
    </microprogram>
    
	<!-- DIVIDIR X,[X] -->
    <microprogram name="DIVIDIR">
		<parameters>
            <parameter addressingMode="IMMEDIATE"/>
            <parameter addressingMode="DIRECT"/>
        </parameters>
        <microInstructions>
            <macroInstruction name="FROM-OPERANDS-TO-ALU">
            	 <parameter name="am1" value="IMMEDIATE" /> 
            	 <parameter name="am2" value="DIRECT"/>
            </macroInstruction>
            <macroInstruction name="DIVIDIR" />
		</microInstructions>
    </microprogram>

	<!-- DIVIDIR X,[[X]] -->
    <microprogram name="DIVIDIR">
		<parameters>
            <parameter addressingMode="IMMEDIATE"/>
            <parameter addressingMode="INDIRECT"/>
        </parameters>
        <microInstructions>
            <macroInstruction name="FROM-OPERANDS-TO-ALU">
            	 <parameter name="am1" value="IMMEDIATE" /> 
            	 <parameter name="am2" value="INDIRECT"/>
            </macroInstruction>
            <macroInstruction name="DIVIDIR" />
		</microInstructions>
    </microprogram>      

	<!-- DIVIDIR X,REG -->
    <microprogram name="DIVIDIR">
		<parameters>
            <parameter addressingMode="IMMEDIATE"/>
            <parameter addressingMode="REGISTER" name="reg"/>
        </parameters>
        <microInstructions>
            <macroInstruction name="FROM-REGISTER-TO-REGISTER">
            	 <parameter name="reg1" value="$reg" /> 
            	 <parameter name="reg2" value="RT"/>
            </macroInstruction>
            <macroInstruction name="FROM-IMMEDIATE-TO-REGISTER">
            	 <parameter name="cde" value="1" /> 
            	 <parameter name="reg" value="AC"/>
            </macroInstruction>
            <macroInstruction name="DIVIDIR" />
		</microInstructions>
    </microprogram>   

    <!-- DIVIDIR [X],X -->
    <microprogram name="DIVIDIR">
		<parameters>
            <parameter addressingMode="DIRECT"/>
            <parameter addressingMode="IMMEDIATE"/>
        </parameters>
        <microInstructions>
            <macroInstruction name="FROM-OPERANDS-TO-ALU">
            	 <parameter name="am1" value="DIRECT" /> 
            	 <parameter name="am2" value="IMMEDIATE"/>
            </macroInstruction>
            <macroInstruction name="DIVIDIR" />
		</microInstructions>
    </microprogram>
    
	<!-- DIVIDIR [X],[X] -->
    <microprogram name="DIVIDIR">
		<parameters>
            <parameter addressingMode="DIRECT"/>
            <parameter addressingMode="DIRECT"/>
        </parameters>
        <microInstructions>
            <macroInstruction name="FROM-OPERANDS-TO-ALU">
            	 <parameter name="am1" value="DIRECT" /> 
            	 <parameter name="am2" value="DIRECT"/>
            </macroInstruction>
            <macroInstruction name="DIVIDIR" />
		</microInstructions>
    </microprogram>

	<!-- DIVIDIR [X],[[X]] -->
    <microprogram name="DIVIDIR">
		<parameters>
            <parameter addressingMode="DIRECT"/>
            <parameter addressingMode="INDIRECT"/>
        </parameters>
        <microInstructions>
            <macroInstruction name="FROM-OPERANDS-TO-ALU">
            	 <parameter name="am1" value="DIRECT" /> 
            	 <parameter name="am2" value="INDIRECT"/>
            </macroInstruction>
            <macroInstruction name="DIVIDIR" />
		</microInstructions>
    </microprogram>      

	<!-- DIVIDIR [X],REG -->
    <microprogram name="DIVIDIR">
		<parameters>
            <parameter addressingMode="DIRECT"/>
            <parameter addressingMode="REGISTER" name="reg"/>
        </parameters>
        <microInstructions>
            <macroInstruction name="FROM-REGISTER-TO-REGISTER">
            	 <parameter name="reg1" value="$reg" /> 
            	 <parameter name="reg2" value="RT"/>
            </macroInstruction>
            <macroInstruction name="FROM-DIRECT-TO-REGISTER">
            	 <parameter name="cde" value="1" /> 
            	 <parameter name="reg" value="AC"/>
            </macroInstruction>
            <macroInstruction name="DIVIDIR" />
		</microInstructions>
    </microprogram>  

    <!-- DIVIDIR [[X]],X -->
    <microprogram name="DIVIDIR">
		<parameters>
            <parameter addressingMode="INDIRECT"/>
            <parameter addressingMode="IMMEDIATE"/>
        </parameters>
        <microInstructions>
            <macroInstruction name="FROM-OPERANDS-TO-ALU">
            	 <parameter name="am1" value="INDIRECT" /> 
            	 <parameter name="am2" value="IMMEDIATE"/>
            </macroInstruction>
            <macroInstruction name="DIVIDIR" />
		</microInstructions>
    </microprogram>
    
	<!-- DIVIDIR [[X]],[X] -->
    <microprogram name="DIVIDIR">
		<parameters>
            <parameter addressingMode="INDIRECT"/>
            <parameter addressingMode="DIRECT"/>
        </parameters>
        <microInstructions>
            <macroInstruction name="FROM-OPERANDS-TO-ALU">
            	 <parameter name="am1" value="INDIRECT" /> 
            	 <parameter name="am2" value="DIRECT"/>
            </macroInstruction>
            <macroInstruction name="DIVIDIR" />
		</microInstructions>
    </microprogram>

	<!-- DIVIDIR [[X]],[[X]] -->
    <microprogram name="DIVIDIR">
		<parameters>
            <parameter addressingMode="INDIRECT"/>
            <parameter addressingMode="INDIRECT"/>
        </parameters>
        <microInstructions>
            <macroInstruction name="FROM-OPERANDS-TO-ALU">
            	 <parameter name="am1" value="INDIRECT" /> 
            	 <parameter name="am2" value="INDIRECT"/>
            </macroInstruction>
            <macroInstruction name="DIVIDIR" />
		</microInstructions>
    </microprogram>      

	<!-- DIVIDIR [[X]],REG -->
    <microprogram name="DIVIDIR">
		<parameters>
            <parameter addressingMode="INDIRECT"/>
            <parameter addressingMode="REGISTER" name="reg"/>
        </parameters>
        <microInstructions>
            <macroInstruction name="FROM-REGISTER-TO-REGISTER">
            	 <parameter name="reg1" value="$reg" /> 
            	 <parameter name="reg2" value="RT"/>
            </macroInstruction>
            <macroInstruction name="FROM-INDIRECT-TO-REGISTER">
            	 <parameter name="cde" value="1" /> 
            	 <parameter name="reg" value="AC"/>
            </macroInstruction>
            <macroInstruction name="DIVIDIR" />
		</microInstructions>
    </microprogram>

    <!-- DIVIDIR REG,X -->
    <microprogram name="DIVIDIR">
		<parameters>
            <parameter addressingMode="REGISTER" name="reg"/>
            <parameter addressingMode="IMMEDIATE"/>
        </parameters>
        <microInstructions>
            <macroInstruction name="FROM-REGISTER-TO-REGISTER">
            	 <parameter name="reg1" value="$reg" /> 
            	 <parameter name="reg2" value="AC"/>
            </macroInstruction>
            <macroInstruction name="FROM-IMMEDIATE-TO-REGISTER">
            	 <parameter name="cde" value="2" /> 
            	 <parameter name="reg" value="RT"/>
            </macroInstruction>
            <macroInstruction name="DIVIDIR" />
		</microInstructions>
    </microprogram>
    
	<!-- DIVIDIR REG,[X] -->
    <microprogram name="DIVIDIR">
		<parameters>
            <parameter addressingMode="REGISTER" name="reg"/>
            <parameter addressingMode="DIRECT"/>
        </parameters>
        <microInstructions>
            <macroInstruction name="FROM-REGISTER-TO-REGISTER">
            	 <parameter name="reg1" value="$reg" /> 
            	 <parameter name="reg2" value="AC"/>
            </macroInstruction>
            <macroInstruction name="FROM-DIRECT-TO-REGISTER">
            	 <parameter name="cde" value="2" /> 
            	 <parameter name="reg" value="RT"/>
            </macroInstruction>
            <macroInstruction name="DIVIDIR" />
		</microInstructions>
    </microprogram>

	<!-- DIVIDIR REG,[[X]] -->
    <microprogram name="DIVIDIR">
		<parameters>
            <parameter addressingMode="REGISTER" name="reg"/>
            <parameter addressingMode="INDIRECT"/>
        </parameters>
        <microInstructions>
            <macroInstruction name="FROM-REGISTER-TO-REGISTER">
            	 <parameter name="reg1" value="$reg" /> 
            	 <parameter name="reg2" value="AC"/>
            </macroInstruction>
            <macroInstruction name="FROM-INDIRECT-TO-REGISTER">
            	 <parameter name="cde" value="2" /> 
            	 <parameter name="reg" value="RT"/>
            </macroInstruction>
            <macroInstruction name="DIVIDIR" />
		</microInstructions>
    </microprogram>      

	<!-- DIVIDIR REG,REG -->
    <microprogram name="DIVIDIR">
		<parameters>
            <parameter addressingMode="REGISTER" name="reg1"/>
            <parameter addressingMode="REGISTER" name="reg2"/>
        </parameters>
        <microInstructions>
            <macroInstruction name="FROM-REGISTER-TO-REGISTER">
            	 <parameter name="reg1" value="$reg1" /> 
            	 <parameter name="reg2" value="AC"/>
            </macroInstruction>
            <macroInstruction name="FROM-REGISTER-TO-REGISTER">
            	 <parameter name="reg1" value="$reg2" /> 
            	 <parameter name="reg2" value="RT"/>
            </macroInstruction>
            <macroInstruction name="DIVIDIR" />
		</microInstructions>
    </microprogram>

	<!-- COMPARAR -->
    <microprogram name="COMPARAR">
        <microInstructions>
            <signalInstruction name="UAL-OP(=)" />
            <signalInstruction name="ICP" />
		</microInstructions>
    </microprogram>

    <!-- COMPARAR X -->
    <microprogram name="COMPARAR">
		<parameters>
            <parameter addressingMode="IMMEDIATE"/>
        </parameters>
        <microInstructions>
            <macroInstruction name="FROM-IMMEDIATE-TO-REGISTER">
            	 <parameter name="cde" value="1" /> 
            	 <parameter name="reg" value="RT" /> 
            </macroInstruction>
            <macroInstruction name="COMPARAR" />
		</microInstructions>
    </microprogram>
    
	<!-- COMPARAR [X] -->
    <microprogram name="COMPARAR">
		<parameters>
            <parameter addressingMode="DIRECT"/>
        </parameters>
        <microInstructions>
            <macroInstruction name="FROM-DIRECT-TO-REGISTER">
            	 <parameter name="cde" value="1" /> 
            	 <parameter name="reg" value="RT" /> 
            </macroInstruction>
            <macroInstruction name="COMPARAR" />
		</microInstructions>
    </microprogram>
    
	<!-- COMPARAR [[X]] -->
    <microprogram name="COMPARAR">
		<parameters>
            <parameter addressingMode="INDIRECT"/>
        </parameters>
        <microInstructions>
            <macroInstruction name="FROM-INDIRECT-TO-REGISTER">
            	 <parameter name="cde" value="1" /> 
            	 <parameter name="reg" value="RT" /> 
            </macroInstruction>
            <macroInstruction name="COMPARAR" />
		</microInstructions>
    </microprogram>    
    
	<!-- COMPARAR REG -->
    <microprogram name="COMPARAR">
		<parameters>
            <parameter addressingMode="REGISTER" name="reg"/>
        </parameters>
        <microInstructions>
            <macroInstruction name="FROM-REGISTER-TO-REGISTER">
            	 <parameter name="reg1" value="$reg"/>
            	 <parameter name="reg2" value="RT" /> 
            </macroInstruction>
            <macroInstruction name="COMPARAR" />
		</microInstructions>
    </microprogram> 

    <!-- COMPARAR X,X -->
    <microprogram name="COMPARAR">
		<parameters>
            <parameter addressingMode="IMMEDIATE"/>
            <parameter addressingMode="IMMEDIATE"/>
        </parameters>
        <microInstructions>
            <macroInstruction name="FROM-OPERANDS-TO-ALU">
            	 <parameter name="am1" value="IMMEDIATE" /> 
            	 <parameter name="am2" value="IMMEDIATE"/>
            </macroInstruction>
            <macroInstruction name="COMPARAR" />
		</microInstructions>
    </microprogram>
    
	<!-- COMPARAR X,[X] -->
    <microprogram name="COMPARAR">
		<parameters>
            <parameter addressingMode="IMMEDIATE"/>
            <parameter addressingMode="DIRECT"/>
        </parameters>
        <microInstructions>
            <macroInstruction name="FROM-OPERANDS-TO-ALU">
            	 <parameter name="am1" value="IMMEDIATE" /> 
            	 <parameter name="am2" value="DIRECT"/>
            </macroInstruction>
            <macroInstruction name="COMPARAR" />
		</microInstructions>
    </microprogram>

	<!-- COMPARAR X,[[X]] -->
    <microprogram name="COMPARAR">
		<parameters>
            <parameter addressingMode="IMMEDIATE"/>
            <parameter addressingMode="INDIRECT"/>
        </parameters>
        <microInstructions>
            <macroInstruction name="FROM-OPERANDS-TO-ALU">
            	 <parameter name="am1" value="IMMEDIATE" /> 
            	 <parameter name="am2" value="INDIRECT"/>
            </macroInstruction>
            <macroInstruction name="COMPARAR" />
		</microInstructions>
    </microprogram>      

	<!-- COMPARAR X,REG -->
    <microprogram name="COMPARAR">
		<parameters>
            <parameter addressingMode="IMMEDIATE"/>
            <parameter addressingMode="REGISTER" name="reg"/>
        </parameters>
        <microInstructions>
            <macroInstruction name="FROM-REGISTER-TO-REGISTER">
            	 <parameter name="reg1" value="$reg" /> 
            	 <parameter name="reg2" value="RT"/>
            </macroInstruction>
            <macroInstruction name="FROM-IMMEDIATE-TO-REGISTER">
            	 <parameter name="cde" value="1" /> 
            	 <parameter name="reg" value="AC"/>
            </macroInstruction>
            <macroInstruction name="COMPARAR" />
		</microInstructions>
    </microprogram>   

    <!-- COMPARAR [X],X -->
    <microprogram name="COMPARAR">
		<parameters>
            <parameter addressingMode="DIRECT"/>
            <parameter addressingMode="IMMEDIATE"/>
        </parameters>
        <microInstructions>
            <macroInstruction name="FROM-OPERANDS-TO-ALU">
            	 <parameter name="am1" value="DIRECT" /> 
            	 <parameter name="am2" value="IMMEDIATE"/>
            </macroInstruction>
            <macroInstruction name="COMPARAR" />
		</microInstructions>
    </microprogram>
    
	<!-- COMPARAR [X],[X] -->
    <microprogram name="COMPARAR">
		<parameters>
            <parameter addressingMode="DIRECT"/>
            <parameter addressingMode="DIRECT"/>
        </parameters>
        <microInstructions>
            <macroInstruction name="FROM-OPERANDS-TO-ALU">
            	 <parameter name="am1" value="DIRECT" /> 
            	 <parameter name="am2" value="DIRECT"/>
            </macroInstruction>
            <macroInstruction name="COMPARAR" />
		</microInstructions>
    </microprogram>

	<!-- COMPARAR [X],[[X]] -->
    <microprogram name="COMPARAR">
		<parameters>
            <parameter addressingMode="DIRECT"/>
            <parameter addressingMode="INDIRECT"/>
        </parameters>
        <microInstructions>
            <macroInstruction name="FROM-OPERANDS-TO-ALU">
            	 <parameter name="am1" value="DIRECT" /> 
            	 <parameter name="am2" value="INDIRECT"/>
            </macroInstruction>
            <macroInstruction name="COMPARAR" />
		</microInstructions>
    </microprogram>      

	<!-- COMPARAR [X],REG -->
    <microprogram name="COMPARAR">
		<parameters>
            <parameter addressingMode="DIRECT"/>
            <parameter addressingMode="REGISTER" name="reg"/>
        </parameters>
        <microInstructions>
            <macroInstruction name="FROM-REGISTER-TO-REGISTER">
            	 <parameter name="reg1" value="$reg" /> 
            	 <parameter name="reg2" value="RT"/>
            </macroInstruction>
            <macroInstruction name="FROM-DIRECT-TO-REGISTER">
            	 <parameter name="cde" value="1" /> 
            	 <parameter name="reg" value="AC"/>
            </macroInstruction>
            <macroInstruction name="COMPARAR" />
		</microInstructions>
    </microprogram>  

    <!-- COMPARAR [[X]],X -->
    <microprogram name="COMPARAR">
		<parameters>
            <parameter addressingMode="INDIRECT"/>
            <parameter addressingMode="IMMEDIATE"/>
        </parameters>
        <microInstructions>
            <macroInstruction name="FROM-OPERANDS-TO-ALU">
            	 <parameter name="am1" value="INDIRECT" /> 
            	 <parameter name="am2" value="IMMEDIATE"/>
            </macroInstruction>
            <macroInstruction name="COMPARAR" />
		</microInstructions>
    </microprogram>
    
	<!-- COMPARAR [[X]],[X] -->
    <microprogram name="COMPARAR">
		<parameters>
            <parameter addressingMode="INDIRECT"/>
            <parameter addressingMode="DIRECT"/>
        </parameters>
        <microInstructions>
            <macroInstruction name="FROM-OPERANDS-TO-ALU">
            	 <parameter name="am1" value="INDIRECT" /> 
            	 <parameter name="am2" value="DIRECT"/>
            </macroInstruction>
            <macroInstruction name="COMPARAR" />
		</microInstructions>
    </microprogram>

	<!-- COMPARAR [[X]],[[X]] -->
    <microprogram name="COMPARAR">
		<parameters>
            <parameter addressingMode="INDIRECT"/>
            <parameter addressingMode="INDIRECT"/>
        </parameters>
        <microInstructions>
            <macroInstruction name="FROM-OPERANDS-TO-ALU">
            	 <parameter name="am1" value="INDIRECT" /> 
            	 <parameter name="am2" value="INDIRECT"/>
            </macroInstruction>
            <macroInstruction name="COMPARAR" />
		</microInstructions>
    </microprogram>      

	<!-- COMPARAR [[X]],REG -->
    <microprogram name="COMPARAR">
		<parameters>
            <parameter addressingMode="INDIRECT"/>
            <parameter addressingMode="REGISTER" name="reg"/>
        </parameters>
        <microInstructions>
            <macroInstruction name="FROM-REGISTER-TO-REGISTER">
            	 <parameter name="reg1" value="$reg" /> 
            	 <parameter name="reg2" value="RT"/>
            </macroInstruction>
            <macroInstruction name="FROM-INDIRECT-TO-REGISTER">
            	 <parameter name="cde" value="1" /> 
            	 <parameter name="reg" value="AC"/>
            </macroInstruction>
            <macroInstruction name="COMPARAR" />
		</microInstructions>
    </microprogram>

    <!-- COMPARAR REG,X -->
    <microprogram name="COMPARAR">
		<parameters>
            <parameter addressingMode="REGISTER" name="reg"/>
            <parameter addressingMode="IMMEDIATE"/>
        </parameters>
        <microInstructions>
            <macroInstruction name="FROM-REGISTER-TO-REGISTER">
            	 <parameter name="reg1" value="$reg" /> 
            	 <parameter name="reg2" value="AC"/>
            </macroInstruction>
            <macroInstruction name="FROM-IMMEDIATE-TO-REGISTER">
            	 <parameter name="cde" value="2" /> 
            	 <parameter name="reg" value="RT"/>
            </macroInstruction>
            <macroInstruction name="COMPARAR" />
		</microInstructions>
    </microprogram>
    
	<!-- COMPARAR REG,[X] -->
    <microprogram name="COMPARAR">
		<parameters>
            <parameter addressingMode="REGISTER" name="reg"/>
            <parameter addressingMode="DIRECT"/>
        </parameters>
        <microInstructions>
            <macroInstruction name="FROM-REGISTER-TO-REGISTER">
            	 <parameter name="reg1" value="$reg" /> 
            	 <parameter name="reg2" value="AC"/>
            </macroInstruction>
            <macroInstruction name="FROM-DIRECT-TO-REGISTER">
            	 <parameter name="cde" value="2" /> 
            	 <parameter name="reg" value="RT"/>
            </macroInstruction>
            <macroInstruction name="COMPARAR" />
		</microInstructions>
    </microprogram>

	<!-- COMPARAR REG,[[X]] -->
    <microprogram name="COMPARAR">
		<parameters>
            <parameter addressingMode="REGISTER" name="reg"/>
            <parameter addressingMode="INDIRECT"/>
        </parameters>
        <microInstructions>
            <macroInstruction name="FROM-REGISTER-TO-REGISTER">
            	 <parameter name="reg1" value="$reg" /> 
            	 <parameter name="reg2" value="AC"/>
            </macroInstruction>
            <macroInstruction name="FROM-INDIRECT-TO-REGISTER">
            	 <parameter name="cde" value="2" /> 
            	 <parameter name="reg" value="RT"/>
            </macroInstruction>
            <macroInstruction name="COMPARAR" />
		</microInstructions>
    </microprogram>      

	<!-- COMPARAR REG,REG -->
    <microprogram name="COMPARAR">
		<parameters>
            <parameter addressingMode="REGISTER" name="reg1"/>
            <parameter addressingMode="REGISTER" name="reg2"/>
        </parameters>
        <microInstructions>
            <macroInstruction name="FROM-REGISTER-TO-REGISTER">
            	 <parameter name="reg1" value="$reg1" /> 
            	 <parameter name="reg2" value="AC"/>
            </macroInstruction>
            <macroInstruction name="FROM-REGISTER-TO-REGISTER">
            	 <parameter name="reg1" value="$reg2" /> 
            	 <parameter name="reg2" value="RT"/>
            </macroInstruction>
            <macroInstruction name="COMPARAR" />
		</microInstructions>
    </microprogram>
	
	<!-- SALTAR X -->
    <microprogram name="SALTAR">
		<parameters>
            <parameter addressingMode="IMMEDIATE"/>
        </parameters>    
        <microInstructions>
            <macroInstruction name="FROM-IMMEDIATE-TO-REGISTER">
            	 <parameter name="cde" value="1" /> 
            	 <parameter name="reg" value="CP"/>
            </macroInstruction>        
		</microInstructions>
    </microprogram>
	
	<!-- SALTAR [X] -->
    <microprogram name="SALTAR">
		<parameters>
            <parameter addressingMode="DIRECT"/>
        </parameters>    
        <microInstructions>
            <macroInstruction name="FROM-DIRECT-TO-REGISTER">
            	 <parameter name="cde" value="1" /> 
            	 <parameter name="reg" value="CP"/>
            </macroInstruction>        
		</microInstructions>
    </microprogram>

	<!-- SALTAR [[X]] -->
    <microprogram name="SALTAR">
		<parameters>
            <parameter addressingMode="INDIRECT"/>
        </parameters>    
        <microInstructions>
            <macroInstruction name="FROM-INDIRECT-TO-REGISTER">
            	 <parameter name="cde" value="1" /> 
            	 <parameter name="reg" value="CP"/>
            </macroInstruction>        
		</microInstructions>
    </microprogram>
	
	<!-- SALTAR REG -->
    <microprogram name="SALTAR">
		<parameters>
            <parameter addressingMode="REGISTER" name="reg"/>
        </parameters>    
        <microInstructions>
            <macroInstruction name="FROM-REGISTER-TO-REGISTER">
            	 <parameter name="reg1" value="$reg" /> 
            	 <parameter name="reg2" value="CP"/>
            </macroInstruction>
		</microInstructions>
    </microprogram>	

	<!-- SALTAR-SI-MA X -->
    <microprogram name="SALTAR-SI-MA">
    	<conditions>
    		<condition negative="false" zero="false" />
		</conditions>
		<parameters>
            <parameter addressingMode="IMMEDIATE"/>
        </parameters>    
        <microInstructions>
            <macroInstruction name="FROM-IMMEDIATE-TO-REGISTER">
            	 <parameter name="cde" value="1" /> 
            	 <parameter name="reg" value="CP"/>
            </macroInstruction>        
		</microInstructions>
    </microprogram>
    	
	<!-- SALTAR-SI-MA [X] -->
    <microprogram name="SALTAR-SI-MA">
    	<conditions>
    		<condition negative="false" zero="false" />
		</conditions>
		<parameters>
            <parameter addressingMode="DIRECT"/>
        </parameters>    
        <microInstructions>
            <macroInstruction name="FROM-DIRECT-TO-REGISTER">
            	 <parameter name="cde" value="1" /> 
            	 <parameter name="reg" value="CP"/>
            </macroInstruction>        
		</microInstructions>
    </microprogram>
    	
	<!-- SALTAR-SI-MA [[X]] -->
    <microprogram name="SALTAR-SI-MA">
    	<conditions>
    		<condition negative="false" zero="false" />
		</conditions>
		<parameters>
            <parameter addressingMode="INDIRECT"/>
        </parameters>    
        <microInstructions>
            <macroInstruction name="FROM-INDIRECT-TO-REGISTER">
            	 <parameter name="cde" value="1" /> 
            	 <parameter name="reg" value="CP"/>
            </macroInstruction>        
		</microInstructions>
    </microprogram>
    	
	<!-- SALTAR-SI-MA REG -->
    <microprogram name="SALTAR-SI-MA">
    	<conditions>
    		<condition negative="false" zero="false" />
		</conditions>
		<parameters>
            <parameter addressingMode="REGISTER" name="reg"/>
        </parameters>    
        <microInstructions>
            <macroInstruction name="FROM-REGISTER-TO-REGISTER">
            	 <parameter name="reg1" value="$reg" /> 
            	 <parameter name="reg2" value="CP"/>
            </macroInstruction>        
		</microInstructions>
    </microprogram>	

	<!-- SALTAR-SI-MAI X -->
    <microprogram name="SALTAR-SI-MAI">
    	<conditions>
    		<condition negative="false" />
    		<condition zero="true" />
		</conditions>
		<parameters>
            <parameter addressingMode="IMMEDIATE"/>
        </parameters>    
        <microInstructions>
            <macroInstruction name="FROM-IMMEDIATE-TO-REGISTER">
            	 <parameter name="cde" value="1" /> 
            	 <parameter name="reg" value="CP"/>
            </macroInstruction>        
		</microInstructions>
    </microprogram>
    	
	<!-- SALTAR-SI-MAI [X] -->
    <microprogram name="SALTAR-SI-MAI">
    	<conditions>
    		<condition negative="false" />
    		<condition zero="true" />
		</conditions>
		<parameters>
            <parameter addressingMode="DIRECT"/>
        </parameters>    
        <microInstructions>
            <macroInstruction name="FROM-DIRECT-TO-REGISTER">
            	 <parameter name="cde" value="1" /> 
            	 <parameter name="reg" value="CP"/>
            </macroInstruction>        
		</microInstructions>
    </microprogram>	
    
	<!-- SALTAR-SI-MAI [[X]] -->
    <microprogram name="SALTAR-SI-MAI">
    	<conditions>
    		<condition negative="false" />
    		<condition zero="true" />
		</conditions>
		<parameters>
            <parameter addressingMode="INDIRECT"/>
        </parameters>    
        <microInstructions>
            <macroInstruction name="FROM-INDIRECT-TO-REGISTER">
            	 <parameter name="cde" value="1" /> 
            	 <parameter name="reg" value="CP"/>
            </macroInstruction>        
		</microInstructions>
    </microprogram>	
    	
	<!-- SALTAR-SI-MAI REG -->
    <microprogram name="SALTAR-SI-MAI">
    	<conditions>
    		<condition negative="false" />
    		<condition zero="true" />
		</conditions>
		<parameters>
            <parameter addressingMode="REGISTER" name="reg"/>
        </parameters>    
        <microInstructions>
            <macroInstruction name="FROM-REGISTER-TO-REGISTER">
            	 <parameter name="reg1" value="$reg" /> 
            	 <parameter name="reg2" value="CP"/>
            </macroInstruction>        
		</microInstructions>
    </microprogram>	
    
	<!-- SALTAR-SI-ME X -->
    <microprogram name="SALTAR-SI-ME">
    	<conditions>
    		<condition negative="true" />
		</conditions>
		<parameters>
            <parameter addressingMode="IMMEDIATE"/>
        </parameters>    
        <microInstructions>
            <macroInstruction name="FROM-IMMEDIATE-TO-REGISTER">
            	 <parameter name="cde" value="1" /> 
            	 <parameter name="reg" value="CP"/>
            </macroInstruction>        
		</microInstructions>
    </microprogram>
    	
	<!-- SALTAR-SI-ME [X] -->
    <microprogram name="SALTAR-SI-ME">
    	<conditions>
    		<condition negative="true" />
		</conditions>
		<parameters>
            <parameter addressingMode="DIRECT"/>
        </parameters>    
        <microInstructions>
            <macroInstruction name="FROM-DIRECT-TO-REGISTER">
            	 <parameter name="cde" value="1" /> 
            	 <parameter name="reg" value="CP"/>
            </macroInstruction>        
		</microInstructions>
    </microprogram>

	<!-- SALTAR-SI-ME [[X]] -->
    <microprogram name="SALTAR-SI-ME">
    	<conditions>
    		<condition negative="true" />
		</conditions>
		<parameters>
            <parameter addressingMode="INDIRECT"/>
        </parameters>    
        <microInstructions>
            <macroInstruction name="FROM-INDIRECT-TO-REGISTER">
            	 <parameter name="cde" value="1" /> 
            	 <parameter name="reg" value="CP"/>
            </macroInstruction>        
		</microInstructions>
    </microprogram>
    
	<!-- SALTAR-SI-ME REG -->
    <microprogram name="SALTAR-SI-ME">
    	<conditions>
    		<condition negative="true" />
		</conditions>
		<parameters>
            <parameter addressingMode="REGISTER" name="reg"/>
        </parameters>    
        <microInstructions>
            <macroInstruction name="FROM-REGISTER-TO-REGISTER">
            	 <parameter name="reg1" value="$reg" /> 
            	 <parameter name="reg2" value="CP"/>
            </macroInstruction>        
		</microInstructions>
    </microprogram>
    
	<!-- SALTAR-SI-MEI X -->
    <microprogram name="SALTAR-SI-MEI">
    	<conditions>
    		<condition negative="true" />
    		<condition zero="true" />
		</conditions>
		<parameters>
            <parameter addressingMode="IMMEDIATE"/>
        </parameters>    
        <microInstructions>
            <macroInstruction name="FROM-IMMEDIATE-TO-REGISTER">
            	 <parameter name="cde" value="1" /> 
            	 <parameter name="reg" value="CP"/>
            </macroInstruction>        
		</microInstructions>
    </microprogram>
    	
	<!-- SALTAR-SI-MEI [X] -->
    <microprogram name="SALTAR-SI-MEI">
    	<conditions>
    		<condition negative="true" />
    		<condition zero="true" />
		</conditions>
		<parameters>
            <parameter addressingMode="DIRECT"/>
        </parameters>    
        <microInstructions>
            <macroInstruction name="FROM-DIRECT-TO-REGISTER">
            	 <parameter name="cde" value="1" /> 
            	 <parameter name="reg" value="CP"/>
            </macroInstruction>        
		</microInstructions>
    </microprogram>
    	
	<!-- SALTAR-SI-MEI [[X]] -->
    <microprogram name="SALTAR-SI-MEI">
    	<conditions>
    		<condition negative="true" />
    		<condition zero="true" />
		</conditions>
		<parameters>
            <parameter addressingMode="INDIRECT"/>
        </parameters>    
        <microInstructions>
            <macroInstruction name="FROM-INDIRECT-TO-REGISTER">
            	 <parameter name="cde" value="1" /> 
            	 <parameter name="reg" value="CP"/>
            </macroInstruction>        
		</microInstructions>
    </microprogram>	
    
	<!-- SALTAR-SI-MEI REG -->
    <microprogram name="SALTAR-SI-MEI">
    	<conditions>
    		<condition negative="true" />
    		<condition zero="true" />
		</conditions>
		<parameters>
            <parameter addressingMode="REGISTER" name="reg"/>
        </parameters>    
        <microInstructions>
            <macroInstruction name="FROM-REGISTER-TO-REGISTER">
            	 <parameter name="reg1" value="$reg" /> 
            	 <parameter name="reg2" value="CP"/>
            </macroInstruction>        
		</microInstructions>
    </microprogram>
    
	<!-- SALTAR-SI-IG X -->
    <microprogram name="SALTAR-SI-IG">
    	<conditions>
    		<condition zero="true" />
		</conditions>
		<parameters>
            <parameter addressingMode="IMMEDIATE"/>
        </parameters>    
        <microInstructions>
            <macroInstruction name="FROM-IMMEDIATE-TO-REGISTER">
            	 <parameter name="cde" value="1" /> 
            	 <parameter name="reg" value="CP"/>
            </macroInstruction>        
		</microInstructions>
    </microprogram>
    	
	<!-- SALTAR-SI-IG [X] -->
    <microprogram name="SALTAR-SI-IG">
    	<conditions>
    		<condition zero="true" />
		</conditions>
		<parameters>
            <parameter addressingMode="DIRECT"/>
        </parameters>    
        <microInstructions>
            <macroInstruction name="FROM-DIRECT-TO-REGISTER">
            	 <parameter name="cde" value="1" /> 
            	 <parameter name="reg" value="CP"/>
            </macroInstruction>        
		</microInstructions>
    </microprogram>

	<!-- SALTAR-SI-IG [[X]] -->
    <microprogram name="SALTAR-SI-IG">
    	<conditions>
    		<condition zero="true" />
		</conditions>
		<parameters>
            <parameter addressingMode="INDIRECT"/>
        </parameters>    
        <microInstructions>
            <macroInstruction name="FROM-INDIRECT-TO-REGISTER">
            	 <parameter name="cde" value="1" /> 
            	 <parameter name="reg" value="CP"/>
            </macroInstruction>        
		</microInstructions>
    </microprogram>
    	
	<!-- SALTAR-SI-IG REG -->
    <microprogram name="SALTAR-SI-IG">
    	<conditions>
    		<condition zero="true" />
		</conditions>
		<parameters>
            <parameter addressingMode="REGISTER" name="reg"/>
        </parameters>    
        <microInstructions>
            <macroInstruction name="FROM-REGISTER-TO-REGISTER">
            	 <parameter name="reg1" value="$reg" /> 
            	 <parameter name="reg2" value="CP"/>
            </macroInstruction>        
		</microInstructions>
    </microprogram>
    
	<!-- SALTAR-SI-NIG X -->
    <microprogram name="SALTAR-SI-NIG">
    	<conditions>
    		<condition zero="false" />
    		<condition negative="true" />
		</conditions>
		<parameters>
            <parameter addressingMode="IMMEDIATE"/>
        </parameters>    
        <microInstructions>
            <macroInstruction name="FROM-IMMEDIATE-TO-REGISTER">
            	 <parameter name="cde" value="1" /> 
            	 <parameter name="reg" value="CP"/>
            </macroInstruction>        
		</microInstructions>
    </microprogram>
    	
	<!-- SALTAR-SI-NIG [X] -->
    <microprogram name="SALTAR-SI-NIG">
    	<conditions>
    		<condition zero="false" />
    		<condition negative="true" />
		</conditions>
		<parameters>
            <parameter addressingMode="DIRECT"/>
        </parameters>    
        <microInstructions>
            <macroInstruction name="FROM-DIRECT-TO-REGISTER">
            	 <parameter name="cde" value="1" /> 
            	 <parameter name="reg" value="CP"/>
            </macroInstruction>        
		</microInstructions>
    </microprogram>
    	
	<!-- SALTAR-SI-NIG [[X]] -->
    <microprogram name="SALTAR-SI-NIG">
    	<conditions>
    		<condition zero="false" />
    		<condition negative="true" />
		</conditions>
		<parameters>
            <parameter addressingMode="INDIRECT"/>
        </parameters>    
        <microInstructions>
            <macroInstruction name="FROM-INDIRECT-TO-REGISTER">
            	 <parameter name="cde" value="1" /> 
            	 <parameter name="reg" value="CP"/>
            </macroInstruction>        
		</microInstructions>
    </microprogram>
    	
	<!-- SALTAR-SI-NIG REG -->
	<microprogram name="SALTAR-SI-NIG">
    	<conditions>
    		<condition zero="false" />
    		<condition negative="true" />
		</conditions>
		<parameters>
            <parameter addressingMode="REGISTER" name="reg"/>
        </parameters>    
        <microInstructions>
            <macroInstruction name="FROM-REGISTER-TO-REGISTER">
            	 <parameter name="reg1" value="$reg" /> 
            	 <parameter name="reg2" value="CP"/>
            </macroInstruction>        
		</microInstructions>
    </microprogram>
    	
                    
    <!-- ================================= -->
    <!-- MACROS -->
    <!-- ================================= -->
    
    <!-- Desde operando inmediato a bus -->
    <microprogram name="FROM-IMMEDIATE-TO-BUS" macro="true">
    	<parameters>
            <parameter name="cde" />
            <parameter name="bus" />
        </parameters>
        <microInstructions>
            <signalInstruction name="CDE$cde-$bus"/>
        </microInstructions>
    </microprogram>
    
	<!-- Desde operando directo a bus -->
    <microprogram name="FROM-DIRECT-TO-BUS" macro="true">
    	<parameters>
            <parameter name="cde" />
            <parameter name="bus" />
        </parameters>
        <microInstructions>
            <signalInstruction name="CDE$cde-BDI"/>
            <signalInstruction name="BDI-RD"/>
            <signalInstruction name="LECT"/>
            <signalInstruction name="RM-$bus"/>
        </microInstructions>
    </microprogram>
    
    <!-- Desde operando indirecto a bus -->
    <microprogram name="FROM-INDIRECT-TO-BUS" macro="true">
    	<parameters>
            <parameter name="cde" />
            <parameter name="bus" />
        </parameters>
        <microInstructions>
            <signalInstruction name="CDE$cde-BDI"/>
            <signalInstruction name="BDI-RD"/>
            <signalInstruction name="LECT"/>
            <signalInstruction name="RM-BDI"/>
            <signalInstruction name="BDI-RD"/>
            <signalInstruction name="LECT"/>
            <signalInstruction name="RM-$bus"/>
        </microInstructions>
    </microprogram>
    
	<!-- Desde registro a bus -->
    <microprogram name="FROM-REGISTER-TO-BUS" macro="true">
    	<parameters>
            <parameter name="reg" />
            <parameter name="bus" />
        </parameters>
        <microInstructions>
            <signalInstruction name="$reg-$bus"/>
        </microInstructions>
    </microprogram>
    
    <!-- Desde operando inmediato a registro -->
    <microprogram name="FROM-IMMEDIATE-TO-REGISTER" macro="true">
    	<parameters>
           	<parameter name="cde" />
            <parameter name="reg" />
        </parameters>
        <microInstructions>
            <macroInstruction name="FROM-IMMEDIATE-TO-BUS">
            	<parameter name="cde" value="$cde" />
            	<parameter name="bus" value="BD" />
            </macroInstruction>
            <macroInstruction name="FROM-DATABUS-TO-REGISTER">
            	<parameter name="reg" value="$reg" />
            </macroInstruction>
        </microInstructions>
    </microprogram>
    
    <!-- Desde operando directo a registro -->
    <microprogram name="FROM-DIRECT-TO-REGISTER" macro="true">
    	<parameters>
			<parameter name="cde" />
            <parameter name="reg" />
        </parameters>
        <microInstructions>
            <macroInstruction name="FROM-DIRECT-TO-BUS">
            	<parameter name="cde" value="$cde" />
            	<parameter name="bus" value="BD" />
            </macroInstruction>
            <macroInstruction name="FROM-DATABUS-TO-REGISTER">
            	<parameter name="reg" value="$reg" />
            </macroInstruction>
        </microInstructions>
    </microprogram>
    
    <!-- Desde operando indirecto a registro -->
    <microprogram name="FROM-INDIRECT-TO-REGISTER" macro="true">
    	<parameters>
			<parameter name="cde" />
            <parameter name="reg" />
        </parameters>
        <microInstructions>
            <macroInstruction name="FROM-INDIRECT-TO-BUS">
            	<parameter name="cde" value="$cde" />
            	<parameter name="bus" value="BD" />
            </macroInstruction>
            <macroInstruction name="FROM-DATABUS-TO-REGISTER">
            	<parameter name="reg" value="$reg" />
            </macroInstruction>
        </microInstructions>
    </microprogram>

    <!-- Desde registro a registro -->
    <microprogram name="FROM-REGISTER-TO-REGISTER" macro="true">
    	<parameters>
			<parameter name="reg1" />
            <parameter name="reg2" />
        </parameters>
        <microInstructions>
            <macroInstruction name="FROM-REGISTER-TO-BUS">
            	<parameter name="reg" value="$reg1" />
            	<parameter name="bus" value="BD" />
            </macroInstruction>
            <macroInstruction name="FROM-DATABUS-TO-REGISTER">
            	<parameter name="reg" value="$reg2" />
            </macroInstruction>
        </microInstructions>
    </microprogram>

    <!-- Desde bus de datos a operando directo -->
    <microprogram name="FROM-DATABUS-TO-DIRECT" macro="true">
    	<parameters>
            <parameter name="cde" />
        </parameters>
        <microInstructions>
            <signalInstruction name="CDE$cde-BDI" />
            <signalInstruction name="BDI-RD" />
            <signalInstruction name="BD-RM" />
            <signalInstruction name="ESCR" />
        </microInstructions>
    </microprogram>

    <!-- Desde bus de datos a operando indirecto -->
    <microprogram name="FROM-DATABUS-TO-INDIRECT" macro="true">
    	<parameters>
            <parameter name="cde" />
        </parameters>
        <microInstructions>
            <signalInstruction name="CDE$cde-BDI" />
            <signalInstruction name="BDI-RD" />
            <signalInstruction name="LECT" />
            <signalInstruction name="RM-BDI" />
            <signalInstruction name="BDI-RD" />
            <signalInstruction name="BD-RM" />
            <signalInstruction name="ESCR" />
        </microInstructions>
    </microprogram>

    <!-- Desde bus de datos a registro -->
    <microprogram name="FROM-DATABUS-TO-REGISTER" macro="true">
    	<parameters>
            <parameter name="reg" />
        </parameters>
        <microInstructions>
            <signalInstruction name="BD-$reg" />
        </microInstructions>
    </microprogram>
    
    <!-- Desde operandos a ALU -->
    <microprogram name="FROM-OPERANDS-TO-ALU" macro="true">
    	<parameters>
            <parameter name="am1" />
            <parameter name="am2" />
        </parameters>
        <microInstructions>
            <macroInstruction name="FROM-$am1-TO-REGISTER">
            	 <parameter name="cde" value="1" /> 
            	 <parameter name="reg" value="AC"/>
            </macroInstruction>
            <macroInstruction name="FROM-$am2-TO-REGISTER">
            	 <parameter name="cde" value="2" /> 
            	 <parameter name="reg" value="RT"/>
            </macroInstruction>
    	</microInstructions>
    </microprogram>
    
</instructionSet>
